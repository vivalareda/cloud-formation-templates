AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC avec sous-reseaux, NAT Instance et Security Groups pour Menu Graphique"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Configuration Generale"
        Parameters:
          - ProjectName
          - EnvironmentType
      - Label:
          default: "Configuration Reseau"
        Parameters:
          - VpcCidr
          - InstanceBits
          - AvailabilityZoneCount
      - Label:
          default: "Configuration de Securite"
        Parameters:
          - KeyPairName

    ParameterLabels:
      ProjectName:
        default: "Nom du projet"
      EnvironmentType:
        default: "Type environnement"
      VpcCidr:
        default: "CIDR Block du VPC"
      InstanceBits:
        default: "Bits pour identifier les instances"
      AvailabilityZoneCount:
        default: "Nombre de zones de disponibilite"
      KeyPairName:
        default: "Nom de la cle SSH"

Parameters:
  ProjectName:
    Type: String
    Description: "Nom du projet (3 a 100 caracteres, alphanumerique)"
    MinLength: 3
    MaxLength: 100
    AllowedPattern: "^[a-zA-Z0-9]+$"
    Default: "pub100genies"
    ConstraintDescription: "Le nom doit etre alphanumerique entre 3 et 100 caracteres."

  EnvironmentType:
    Type: String
    Description: "Type environnement"
    Default: "Test"
    AllowedValues:
      - "Test"
      - "Prod"
    ConstraintDescription: "Choisissez Test ou Prod"

  VpcCidr:
    Type: String
    Description: "Plage CIDR du VPC (ex: 10.0.0.0/16)"
    Default: "10.0.0.0/16"
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$"
    ConstraintDescription: "Doit etre une plage CIDR valide (ex: 10.0.0.0/16)."

  InstanceBits:
    Type: Number
    Description: "Nombre de bits pour identifier les instances (entre 4 et 16)"
    Default: 8
    MinValue: 4
    MaxValue: 16
    ConstraintDescription: "Valeur entre 4 et 16."

  AvailabilityZones:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: "Zones de disponibilite"

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Nom KeyPair EC2 existante"

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, "Prod"]

Resources:
  # VPC Principal
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-VPC"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-IGW"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Sous-reseaux publics
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 6, !Ref InstanceBits]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-PublicSubnet1"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: IsProduction
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 6, !Ref InstanceBits]]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-PublicSubnet2"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  # Sous-reseaux prives
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCidr, 6, !Ref InstanceBits]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-PrivateSubnet1"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [3, !Cidr [!Ref VpcCidr, 6, !Ref InstanceBits]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-PrivateSubnet2"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: IsProduction
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [4, !Cidr [!Ref VpcCidr, 6, !Ref InstanceBits]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-PrivateSubnet3"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Condition: IsProduction
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [5, !Cidr [!Ref VpcCidr, 6, !Ref InstanceBits]]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-PrivateSubnet4"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  # Tables de routage
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-PublicRouteTable"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: IsProduction
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Groups
  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group pour la JumpBox"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${EnvironmentType}-JumpBoxSG"
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  NATStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://menugraphique-2025-h24-22.s3.us-east-1.amazonaws.com/natInstance.json"
      Parameters:
        VpcId: !Ref MyVPC
        PublicSubnetId: !Ref PublicSubnet1
        PrivatesSubnetsID: !If
          - IsProduction
          - !Join [
              ",",
              [
                !Ref PrivateSubnet1,
                !Ref PrivateSubnet2,
                !Ref PrivateSubnet3,
                !Ref PrivateSubnet4,
              ],
            ]
          - !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
        KeyPairName: !Ref KeyPairName

Outputs:
  VpcId:
    Description: "ID du VPC cree"
    Value: !Ref MyVPC
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"

  PublicSubnet1Id:
    Description: "ID du premier sous-reseau public"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1Id"

  PublicSubnet2Id:
    Condition: IsProduction
    Description: "ID du second sous-reseau public"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2Id"

  PrivateSubnet1Id:
    Description: "ID du premier sous-reseau prive (licence)"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1Id"

  PrivateSubnet2Id:
    Description: "ID du second sous-reseau prive (database)"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2Id"

  PrivateSubnet3Id:
    Condition: IsProduction
    Description: "ID du troisieme sous-reseau prive"
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet3Id"

  PrivateSubnet4Id:
    Condition: IsProduction
    Description: "ID du quatrieme sous-reseau prive"
    Value: !Ref PrivateSubnet4
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet4Id"

  ProjectName:
    Description: "Nom du projet"
    Value: !Ref ProjectName
    Export:
      Name: !Sub "${AWS::StackName}-ProjectName"

  EnvironmentType:
    Description: "Type environnement"
    Value: !Ref EnvironmentType
    Export:
      Name: !Sub "${AWS::StackName}-EnvironmentType"

  JumpBoxSecurityGroupId:
    Description: "ID du groupe de securite pour la JumpBox"
    Value: !Ref JumpBoxSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-JumpBoxSGId"
