AWSTemplateFormatVersion: "2010-09-09"
Description: "Template Cloud Formation pour creation de serveurs"

Parameters:
  NetworkStackName:
    Type: String
    Description: "Nom du stack réseau CloudFormation"
    Default: "vpc"

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Nom de la clé SSH pour la connexion aux instances"

  S3BucketScripts:
    Type: String
    Description: "Nom du bucket S3 contenant les scripts d'installation"
    Default: "menugraphique-2025-h24-22"

  DBUser:
    Type: String
    Description: "Nom d'utilisateur de la base de données"
    MinLength: 3
    AllowedPattern: "^[a-zA-Z0-9]+$"
    Default: test

  DBRootPassword:
    Type: String
    Description: "Mot de passe root de la base de données"
    NoEcho: true
    MinLength: 8

  License:
    Type: String
    Description: "Licence de serveur MenuGraphique"
    MinLength: 129
    MaxLength: 129
    Default: ad8791153cc463069f66ed80984d415b:0a4618a6b6900794a2773100f84e9c1d90e0b34f5f10b150c6249ad912f87dc1540aab1312c323ab0c9c5e9ce44fcf6e

  DNSPrefix:
    Type: String
    Description: "Prefix DNS"

  EnvironmentType:
    Type: String
    Description: "Type environnement"
    Default: "Test"
    AllowedValues:
      - "Test"
      - "Prod"
    ConstraintDescription: "Choisissez Test ou Prod"

Conditions:
  IsProduction: !Equals [!Ref EnvironmentType, "Prod"]

Resources:
  ImageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${NetworkStackName}-image-queue"
      VisibilityTimeout: 1200
      Tags:
        - Key: Name
          Value: !Sub "${NetworkStackName}-ImageQueue"
        - Key: Project
          Value: !ImportValue
            Fn::Sub: "${NetworkStackName}-ProjectName"

  WebServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Web Service
      VpcId: !ImportValue
        Fn::Sub: "${NetworkStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: "${NetworkStackName}-JumpBoxSGId"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  WebSiteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Website server
      VpcId: !ImportValue
        Fn::Sub: "${NetworkStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: "${NetworkStackName}-JumpBoxSGId"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Database server
      VpcId: !ImportValue
        Fn::Sub: "${NetworkStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3360
          ToPort: 3360
          SourceSecurityGroupId: !Ref WebServiceSecurityGroup
        - IpProtocol: tcp
          FromPort: 3360
          ToPort: 3360
          SourceSecurityGroupId: !Ref WorkerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: "${NetworkStackName}-JumpBoxSGId"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  LicenseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for License server
      VpcId: !ImportValue
        Fn::Sub: "${NetworkStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          SourceSecurityGroupId: !Ref WebServiceSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: "${NetworkStackName}-JumpBoxSGId"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  WorkerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Worker server
      VpcId: !ImportValue
        Fn::Sub: "${NetworkStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: "${NetworkStackName}-JumpBoxSGId"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  WebSiteLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${NetworkStackName}-WebSiteLaunchTemplate"
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-0013610ea966aafe0
        InstanceType: !If
          - IsProduction
          - c7g.medium
          - c6g.medium
        IamInstanceProfile:
          Name: "LabInstanceProfile"
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WebSiteSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo dnf update -y
            sudo dnf install -y nginx
            mkdir -p /home/ec2-user/siteweb
            aws s3 cp s3://${S3BucketScripts}/site-web/ /home/ec2-user/siteweb --recursive
            CONFIG_FILE="/home/ec2-user/siteweb/js/config.js"
            if [ -f "$CONFIG_FILE" ]; then
              echo "Updating API endpoint in config.js..."
                sudo sed -i 's|http://localhost:8080|http://api.'"${DNSPrefix}"'team22.gti778.ets.bimweb.net|g' "$CONFIG_FILE"
                cat $CONFIG_FILE
              else
                echo "Warning: config.js not found!"
              fi
            sudo mv -f /home/ec2-user/siteweb/nginx.conf /etc/nginx/nginx.conf
            sudo nginx -t
            sudo systemctl start nginx
            sudo systemctl enable nginx
            sudo systemctl restart nginx
            sudo chown -R nginx:nginx /home/ec2-user/siteweb
            sudo chmod -R 755 /home/ec2-user/siteweb
            sudo chmod +x /home/ec2-user
            sudo find /home/ec2-user/siteweb -type d -exec chmod 755 {} \;
            sudo find /home/ec2-user/siteweb -type f -exec chmod 644 {} \;

  WebServiceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${NetworkStackName}-WebServiceLaunchTemplate"
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-0013610ea966aafe0
        InstanceType: !If
          - IsProduction
          - m7g.medium
          - c6g.medium
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WebServiceSecurityGroup
        IamInstanceProfile:
          Name: "LabInstanceProfile"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash

            exec > >(tee -i /var/log/serveur-licence-install.log) 2>&1
            set -e

            export LICENSE="${License}"
            export DBRootPassword="${DBRootPassword}"
            export DBUser="${DBUser}"
            export DNSPrefix="${DNSPrefix}"

            dnf update -y
            dnf install -y java-21-amazon-corretto
            dnf install -y aws-cli
            mkdir -p /opt/webserver
            cd /opt/webserver
            aws s3 cp s3://${S3BucketScripts}/web-server/WebServer/WebServer-0.0.1-SNAPSHOT.jar /opt/webserver/WebServer-0.0.1-SNAPSHOT.jar
            cat <<EOF >> /etc/environment
            WEBSERVER_PORT=80
            WEBSERVER_CRYPTOSERVER=licence.${DNSPrefix}team22.gti778.ets.bimweb.net
            WEBSERVER_CRYPTOSERVERPORT=9090
            WEBSERVER_CRYPTOLICENCE=$LICENSE
            WEBSERVER_DBHOST=db.${DNSPrefix}team22.gti778.ets.bimweb.net
            WEBSERVER_DBPORT=3360
            WEBSERVER_DBUSER=$DBUser
            WEBSERVER_DBPASS=$DBRootPassword
            WEBSERVER_IMAGEQUEUE=${NetworkStackName}-image-queue
            EOF
            export $(cat /etc/environment | xargs)
            cat <<EOF > /etc/systemd/system/menugraphique.service
            [Unit]
            Description=WebServer de MenuGraphique
            After=network.target
            [Service]
            User=root
            WorkingDirectory=/opt/webserver
            EnvironmentFile=/etc/environment
            ExecStart=/usr/bin/java -jar /opt/webserver/WebServer-0.0.1-SNAPSHOT.jar
            SuccessExitStatus=143
            Restart=always
            RestartSec=5
            StandardOutput=journal
            StandardError=journal
            [Install]
            WantedBy=multi-user.target
            EOF
            systemctl daemon-reload
            systemctl enable menugraphique
            systemctl start menugraphique

  DbLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${NetworkStackName}-DbLaunchTemplate"
      LaunchTemplateData:
        ImageId: ami-0013610ea966aafe0
        InstanceType: c6g.large
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref DbSecurityGroup
        IamInstanceProfile:
          Name: "LabInstanceProfile"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo dnf update -y
            sudo dnf install mariadb105-server -y
            sudo systemctl enable mariadb
            sudo systemctl start mariadb

            CONFIG_FILE="/etc/my.cnf.d/mariadb-server.cnf"
            if grep -q "^port=" $CONFIG_FILE; then
                sudo sed -i "s/^port=.*/port=3360/" $CONFIG_FILE
            else
                sudo sed -i "/^\[mysqld\]/a port=3360" $CONFIG_FILE
            fi
            sudo systemctl restart mariadb

            echo "CREATE USER '${DBUser}' IDENTIFIED BY '${DBRootPassword}';" >> /tmp/db.setup
            echo "GRANT ALL PRIVILEGES ON *.* TO '${DBUser}'@'%';" >> /tmp/db.setup
            echo "FLUSH PRIVILEGES;" >> /tmp/db.setup

            sudo mysqladmin -u root password '${DBRootPassword}'
            mysql -u root --password="${DBRootPassword}" < /tmp/db.setup

            echo "Installation et configuration de MariaDB terminees. Serveur en ecoute sur le port 3360."

  LicenseLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${NetworkStackName}-LicenseLaunchTemplate"
      LaunchTemplateData:
        ImageId: ami-0013610ea966aafe0
        InstanceType: c6g.medium
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref LicenseSecurityGroup
        IamInstanceProfile:
          Name: "LabInstanceProfile"
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > >(tee -i /var/log/serveur-licence-install.log) 2>&1
            set -e

            # Install required packages
            sudo dnf update -y
            sudo dnf install -y nodejs npm aws-cli

            # Prepare app directory
            sudo mkdir -p /home/ec2-user/serveur-licence
            sudo chown -R ec2-user:ec2-user /home/ec2-user/serveur-licence
            sudo chmod -R 755 /home/ec2-user/serveur-licence

            # Download app from S3
            aws s3 cp s3://${S3BucketScripts}/service-license/ /home/ec2-user/serveur-licence/ --recursive

            # Move into app directory
            cd /home/ec2-user/serveur-licence

            # Install dependencies
            npm install

            # Generate keys or config
            node generate.js

            # Create a systemd service to run the server on port 9090
            sudo tee /etc/systemd/system/serveur-licence.service > /dev/null <<EOF
            [Unit]
            Description=Serveur de licence Node.js
            After=network.target

            [Service]
            User=ec2-user
            WorkingDirectory=/home/ec2-user/serveur-licence
            ExecStart=/usr/bin/node /home/ec2-user/serveur-licence/index.js 9090
            Restart=always
            Environment=PORT=9090
            StandardOutput=journal
            StandardError=journal

            [Install]
            WantedBy=multi-user.target
            EOF

            # Reload and start the service
            sudo systemctl daemon-reload
            sudo systemctl enable serveur-licence
            sudo systemctl start serveur-licence

            # Open firewall for port 9090
            sudo firewall-cmd --permanent --add-port=9090/tcp
            sudo firewall-cmd --reload

  WorkerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${NetworkStackName}-WorkerLaunchTemplate"
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: ami-0013610ea966aafe0
        InstanceType: !If
          - IsProduction
          - c7g.large
          - c6g.medium
        IamInstanceProfile:
          Name: "LabInstanceProfile"
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref WorkerSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            export LICENSE="${License}"
            export DBRootPassword="${DBRootPassword}"
            export DBUser="${DBUser}"
            export DNSPrefix="${DNSPrefix}"
            export ImageQueue="${ImageQueue}"
            dnf update -y
            dnf install -y java-21-amazon-corretto
            dnf install -y aws-cli
            mkdir -p /opt/worker
            cd /opt/worker
            aws s3 cp s3://${S3BucketScripts}/web-server/ImageWorker/ImageWorker-0.0.1-SNAPSHOT-jar-with-dependencies.jar /opt/worker/ImageWorker-0.0.1-SNAPSHOT-jar-with-dependencies.jar

            cat <<EOF >> /etc/environment
            WEBSERVER_DBHOST=db.${DNSPrefix}team22.gti778.ets.bimweb.net
            WEBSERVER_DBPORT=3360
            WEBSERVER_DBUSER=$DBUser
            WEBSERVER_DBPASS=$DBRootPassword
            WEBSERVER_IMAGEQUEUE=$ImageQueue
            EOF

            cat <<EOF > /etc/systemd/system/imageworker.service
            [Unit]
            Description=ImageWorker Service
            After=network.target

            [Service]
            User=root
            WorkingDirectory=/opt/worker
            EnvironmentFile=/etc/environment
            ExecStart=/usr/bin/java -jar /opt/worker/ImageWorker-0.0.1-SNAPSHOT-jar-with-dependencies.jar
            SuccessExitStatus=143
            Restart=always
            RestartSec=5
            StandardOutput=journal
            StandardError=journal

            [Install]
            WantedBy=multi-user.target
            EOF

            systemctl daemon-reload
            systemctl enable imageworker
            systemctl start imageworker

  DbInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DbLaunchTemplate
        Version: !GetAtt DbLaunchTemplate.LatestVersionNumber
      SubnetId: !ImportValue
        Fn::Sub: "${NetworkStackName}-PrivateSubnet1Id"
      Tags:
        - Key: Name
          Value: !Sub "${NetworkStackName}-DbServer"
        - Key: Project
          Value: !ImportValue
            Fn::Sub: "${NetworkStackName}-ProjectName"
        - Key: Layer
          Value: "bd"

  LicenseInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LicenseLaunchTemplate
        Version: !GetAtt LicenseLaunchTemplate.LatestVersionNumber
      SubnetId: !ImportValue
        Fn::Sub: "${NetworkStackName}-PrivateSubnet1Id"
      Tags:
        - Key: Name
          Value: !Sub "${NetworkStackName}-LicenseServer"
        - Key: Project
          Value: !ImportValue
            Fn::Sub: "${NetworkStackName}-ProjectName"
        - Key: Layer
          Value: "license"

  WebServiceInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServiceLaunchTemplate
        Version: !GetAtt WebServiceLaunchTemplate.LatestVersionNumber
      SubnetId: !ImportValue
        Fn::Sub: "${NetworkStackName}-PublicSubnet1Id"
      Tags:
        - Key: Name
          Value: !Sub "${NetworkStackName}-WebServiceServer"
        - Key: Project
          Value: !ImportValue
            Fn::Sub: "${NetworkStackName}-ProjectName"
        - Key: Layer
          Value: "web-service"
        - Key: Environment
          Value: "Production"

  WebSiteInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WebSiteLaunchTemplate
        Version: !GetAtt WebSiteLaunchTemplate.LatestVersionNumber
      SubnetId: !ImportValue
        Fn::Sub: "${NetworkStackName}-PublicSubnet1Id"
      Tags:
        - Key: Name
          Value: !Sub "${NetworkStackName}-WebSiteServer"
        - Key: Project
          Value: !ImportValue
            Fn::Sub: "${NetworkStackName}-ProjectName"
        - Key: Layer
          Value: "website"
        - Key: Environment
          Value: "Production"

  WorkerInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WorkerLaunchTemplate
        Version: !GetAtt WorkerLaunchTemplate.LatestVersionNumber
      SubnetId: !ImportValue
        Fn::Sub: "${NetworkStackName}-PrivateSubnet1Id"
      Tags:
        - Key: Name
          Value: !Sub "${NetworkStackName}-WorkerServer"
        - Key: Project
          Value: !ImportValue
            Fn::Sub: "${NetworkStackName}-ProjectName"
        - Key: Layer
          Value: "worker"

Outputs:
  DbServerPrivateIP:
    Description: "Adresse IP privée du serveur de base de données"
    Value: !GetAtt DbInstance.PrivateIp

  DbSecurityGroupId:
    Description: "ID du groupe de sécurité de la base de données"
    Value: !Ref DbSecurityGroup
